# Makefile for the Lorenz System Scan Project

# Compiler and flags
FC = gfortran
FFLAGS = -O3 -Wall -Wextra -fcheck=bounds -g # Optimization, warnings, bounds checking, debug symbols
LDFLAGS =

# Source files
SRCS = parameters.f90 derivatives.f90 rk4_solver.f90 main_lorenz_scan.f90

# Object files (derived from SRCS)
OBJS = $(patsubst %.f90,%.o,$(SRCS))

# Module files (Fortran generates these)
# Assuming standard naming convention (module_name.mod)
MODS = simulation_parameters.mod derivatives.mod rk4_solver.mod

# Executable name
EXEC = lorenz_scan.exe

# Output files from simulation and plotting
RESULTS_CSV = lorenz_scan_results.csv
PLOT_DIR = plots
PYTHON_SCRIPT = visualize_results.py

# Phony targets (targets that don't represent files)
.PHONY: all run plot clean help

# Default target: Build the executable
all: $(EXEC)

# Rule to link the executable
$(EXEC): $(OBJS)
	$(FC) $(OBJS) -o $@ $(LDFLAGS)
	@echo "Executable '$(EXEC)' created successfully."

# Rule to compile Fortran source files into object files
# This handles module dependencies implicitly if sources are ordered correctly
# or relies on make's dependency tracking.
# Using a pattern rule:
%.o: %.f90
	$(FC) $(FFLAGS) -c $< -o $@

# Explicit dependencies for modules (more robust)
# derivatives.o depends on simulation_parameters.mod (implicitly via parameters.f90)
# rk4_solver.o depends on derivatives.mod (implicitly via derivatives.f90)
# main_lorenz_scan.o depends on simulation_parameters.mod, derivatives.mod, rk4_solver.mod
# Make usually handles this, but being explicit can help.
# Note: Actual .mod file dependencies are tricky in Makefiles without helper scripts.
# The simple pattern rule often works if compilation order is correct or if
# the compiler handles finding modules in the current directory.

# Target to run the simulation
run: $(EXEC)
	@echo "Running the simulation..."
	./$(EXEC)

# Target to generate plots (depends on the results file existing)
plot: $(RESULTS_CSV)
	@echo "Generating plots..."
	python $(PYTHON_SCRIPT)

# Target to clean up generated files
clean:
	@echo "Cleaning up generated files..."
	rm -f $(EXEC) $(OBJS) $(MODS) $(RESULTS_CSV)
	rm -rf $(PLOT_DIR)
	@echo "Cleanup complete."

# Target to display help information
help:
	@echo "Makefile Targets:"
	@echo "  make all     (or just 'make') Compile the Fortran code (default)."
	@echo "  make run     Compile if necessary and run the simulation."
	@echo "  make plot    Generate plots from existing results (requires Python & libraries)."
	@echo "  make clean   Remove compiled files, results, and plots."
	@echo "  make help    Show this help message."

# Indicate that the results file is generated by the executable
$(RESULTS_CSV): $(EXEC)
# This rule doesn't need a command, it just establishes the dependency for 'make plot'